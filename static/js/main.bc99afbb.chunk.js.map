{"version":3,"sources":["static/Play.svg","static/Randomize.svg","static/Pause.svg","NavBar.tsx","Cell.tsx","GridLayout.tsx","utils.ts","Grid.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","controlClassname","NavBar","props","state","className","id","onClick","this","actionCallBack","bind","src","Play","alt","Pause","Randomize","React","Component","Cell","alive","style","transition","loadingAnimation","GridLayout","validateProps","gridState","length","size","h","console","error","w","oldValue","oldRange","newRange","grid","cellStyle","i","row","j","min","max","push","key","margin","padding","width","cellSize","height","createGrid","Grid","play","generateEmptyState","loadingIn","wrapperElement","document","getElementById","Math","floor","clientHeight","clientWidth","setState","event","handleNextState","generateNewRandomState","calculateNextGrid","setTimeout","rowCount","columnCount","newGridState","rowIndex","columnIndex","aliveNeighbours","countAliveNeighbours","oldCellState","newCellState","calculateCellState","cellIndex","count","gridRowIndexOffset","gridColumnIndexOffset","indexInGridBounds","oldState","newState","random","App","gridRef","createRef","current","handleControlEvent","messageToGrid","ref","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc99afbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Play.670d0d6e.svg\";","module.exports = __webpack_public_path__ + \"static/media/Randomize.2053a1f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/Pause.b607af87.svg\";","import React from \"react\";\nimport Play from \"./static/Play.svg\";\nimport Randomize from \"./static/Randomize.svg\";\nimport Pause from \"./static/Pause.svg\";\nimport {ControlEvent} from \"./model/controlEvent\";\n\nconst controlClassname = \"h-full -mt-10 ml-8 inline-block cursor-pointer\";\n\ninterface ComponentsProps { actionCallBack: (event: ControlEvent) => void }\ninterface ComponentsState { }\n\nclass NavBar extends React.Component<ComponentsProps, ComponentsState> {\n\tconstructor(props: ComponentsProps) {\n\t\tsuper(props);\n\n\t\tthis.state = { }\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"absolute flex items-center justify-between flex-wrap w-full h-20 bg-black px-6 py-1 text-white font-extrabold text-5xl\">\n\t\t\t\t<div>\n\t\t\t\t\t<span>Game of Life</span>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"controls\" className=\"h-10\">\n\t\t\t\t\t{/*<img id=\"SLOW\" className={controlClassname} onClick={this.props.actionCallBack.bind(this,\"SLOW\")} src={SlowDown} alt=\"\"/>*/}\n\t\t\t\t\t<img id=\"PLAY\" className={controlClassname} onClick={this.props.actionCallBack.bind(this,\"PLAY\")} src={Play} alt=\"\"/>\n\t\t\t\t\t{/*<img id=\"FAST\" className={controlClassname} onClick={this.props.actionCallBack.bind(this,\"FAST\")} src={Faster} alt=\"\"/>*/}\n\t\t\t\t\t<img id=\"PAUSE\" className={controlClassname} onClick={this.props.actionCallBack.bind(this,\"PAUSE\")} src={Pause} alt=\"\"/>\n\t\t\t\t\t<img id=\"RAND\" className={controlClassname} onClick={this.props.actionCallBack.bind(this,\"RAND\")} src={Randomize} alt=\"\"/>\n\t\t\t\t\t{/*<img id=\"EDIT\" className={controlClassname} onClick={this.props.actionCallBack.bind(this,\"EDIT\")} src={Edit} alt=\"\"/>*/}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default NavBar;\n","import React, {CSSProperties} from 'react';\n\ninterface ComponentsProps { alive: 0 | 1, className?: string, style?: CSSProperties }\ninterface ComponentsState {  }\n\nclass Cell extends React.Component<ComponentsProps, ComponentsState> {\n\tconstructor(props: ComponentsProps) {\n\t\tsuper(props);\n\n\t\tthis.state = { }\n\t}\n\n\trender () {\n\t\tconst internalStyles: CSSProperties = {transition: \"background-color 0.1s\"};\n\t\treturn (\n\t\t\t<div className={(this.props.alive ? \"bg-grey\" : \"bg-green\" ) + \" cell flex-1 inline-block rounded \" + this.props.className} style={{...internalStyles, ...this.props.style}}/>\n\t\t);\n\t}\n}\n\nexport default Cell;\n","import React, {CSSProperties} from 'react';\nimport Cell from \"./Cell\";\nimport Grid from \"./model/grid\";\nimport remap from \"./utils\";\n\ninterface ComponentsProps { gridState: Grid, cellSize: number, size: { h: number, w: number }, loadingAnimation: boolean }\ninterface ComponentsState { }\n\nlet loadingAnimation: CSSProperties = {\n\ttransition: \"background-color 1s\"\n};\n\nexport default class GridLayout extends React.Component<ComponentsProps, ComponentsState> {\n\tconstructor(props: ComponentsProps) {\n\t\tsuper(props);\n\n\t\tthis.validateProps(props);\n\n\t\tthis.state = { };\n\t}\n\n\tvalidateProps(props: ComponentsProps) {\n\t\tif (props.gridState.length !== props.size.h) console.error(\"Invalid Props: The GridState Row Count doesn't match with the size.h \");\n\t\tif (props.gridState[0].length !== props.size.w) console.error(\"Invalid Props: The GridState Column Count doesn't match with the size.w \");\n\t}\n\n\tcreateGrid() {\n\t\tlet grid = [];\n\n\t\tlet cellStyle = this.props.loadingAnimation ? loadingAnimation : {};\n\n\t\tfor (let i = 0; i < this.props.size.h; i++) {\n\t\t\tlet row = [];\n\t\t\tfor (let j = 0; j < this.props.size.w; j++) {\n\t\t\t\tif (cellStyle.transition) cellStyle.transition = \"background-color 1s ease \" + remap(i+j, {min: 0, max: this.props.size.h+this.props.size.w}, {min: 0, max: 2}) + \"s\";\n\t\t\t\trow.push(<Cell key={i-j} className=\"mx-1\" style={{margin: \"0 3px\", ...cellStyle}} alive={this.props.gridState[i][j]} />)\n\t\t\t}\n\t\t\tgrid.push(<div key={i} className=\"row flex flex-1 py-1\" style={{padding: \"3px 0\"}}>{row}</div>)\n\t\t}\n\t\treturn grid\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div className={\"flex flex-col\"} style={{ width: this.props.size.w * this.props.cellSize, height: this.props.size.h * this.props.cellSize }}>\n\t\t\t\t{this.createGrid()}\n\t\t\t</div>\n\t\t)\n\t}\n}","export default function remap(oldValue: number, oldRange:{min: number, max: number}, newRange:{min: number, max: number}) {\n\treturn (((oldValue - oldRange.min) * (newRange.max - newRange.min)) / (oldRange.max - oldRange.min)) + newRange.min;\n}","import React from \"react\";\nimport GridLayout from \"./GridLayout\";\nimport {ControlEvent} from \"./model/controlEvent\";\nimport GridObject from \"./model/grid\";\nimport Alive from \"./model/alive\";\n\ninterface ComponentsProps {  }\ninterface ComponentsState { play: boolean, cellSize: number, size: { h: number, w: number }, gridState: GridObject, loadingIn: boolean }\n\nclass Grid extends React.Component<ComponentsProps, ComponentsState> {\n\tconstructor(props: ComponentsProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tplay: false,\n\t\t\tcellSize: 25,\n\t\t\tsize: { h: 30, w: 60 },\n\t\t\tgridState: this.generateEmptyState(30,60),\n\t\t\tloadingIn: false\n\t\t}\n\t}\n\n\tcomponentDidMount(): void {\n\t\tconst wrapperElement = document.getElementById(\"GridWrapper\");\n\t\tif (wrapperElement) {\n\t\t\tconst h =  Math.floor(wrapperElement.clientHeight / this.state.cellSize);\n\t\t\tconst w = Math.floor(wrapperElement.clientWidth / this.state.cellSize);\n\n\t\t\tthis.setState({\n\t\t\t\tsize: {h, w},\n\t\t\t\tgridState: this.generateEmptyState(h, w),\n\t\t\t\tloadingIn: false\n\t\t\t});\n\t\t}\n\t}\n\n\thandleControlEvent(event: ControlEvent) {\n\t\tswitch (event) {\n\t\t\tcase \"PLAY\":\n\t\t\t\tif (!this.state.play) this.setState({play: true, loadingIn: false}, () => {this.handleNextState()});\n\t\t\t\treturn;\n\t\t\tcase \"PAUSE\":\n\t\t\t\tthis.setState({play: false});\n\t\t\t\treturn;\n\t\t\tcase \"RAND\":\n\t\t\t\tthis.setState({gridState: this.generateNewRandomState(), loadingIn: true});\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\thandleNextState() {\n\t\tif (!this.state.play) return;\n\n\t\tthis.setState({gridState: this.calculateNextGrid( this.state.gridState )});\n\n\t\tsetTimeout(() => {this.handleNextState()}, 150)\n\t}\n\n\tcalculateNextGrid(grid: GridObject, rowCount: number = this.state.size.h, columnCount: number = this.state.size.w): GridObject {\n\t\tlet newGridState: GridObject = [];\n\t\tfor (let rowIndex = 0; rowIndex < rowCount; rowIndex ++) {\n\t\t\tnewGridState[rowIndex] = [];\n\t\t\tfor (let columnIndex = 0; columnIndex < columnCount; columnIndex ++) {\n\t\t\t\tconst aliveNeighbours = this.countAliveNeighbours(grid, {rowIndex, columnIndex});\n\t\t\t\tconst oldCellState = grid[rowIndex][columnIndex];\n\t\t\t\tconst newCellState = this.calculateCellState(aliveNeighbours, oldCellState);\n\t\t\t\tnewGridState[rowIndex].push( newCellState );\n\t\t\t}\n\t\t}\n\t\treturn newGridState\n\t}\n\n\tcountAliveNeighbours(grid: GridObject, cellIndex: { rowIndex: number, columnIndex: number }): number {\n\t\tlet count = 0;\n\t\tfor (let gridRowIndexOffset = -1; gridRowIndexOffset <= 1; gridRowIndexOffset++ ) {\n\t\t\tfor (let gridColumnIndexOffset = -1; gridColumnIndexOffset <= 1; gridColumnIndexOffset++ ) {\n\t\t\t\tconst rowIndex = cellIndex.rowIndex + gridRowIndexOffset;\n\t\t\t\tconst columnIndex = cellIndex.columnIndex + gridColumnIndexOffset;\n\t\t\t\tif (this.indexInGridBounds(grid, {rowIndex, columnIndex})\n\t\t\t\t&& !(gridColumnIndexOffset === 0 && gridRowIndexOffset === 0)) {\n\t\t\t\t\tcount += grid[rowIndex][columnIndex] ? 1 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count\n\t}\n\n\tindexInGridBounds(grid: GridObject, cellIndex: { rowIndex: number, columnIndex: number }) {\n\t\treturn cellIndex.rowIndex >= 0 && cellIndex.rowIndex < grid.length && cellIndex.columnIndex >= 0 && cellIndex.columnIndex < grid[0].length;\n\t}\n\n\tcalculateCellState(aliveNeighbours: number, oldState: Alive): Alive {\n\t\tif (oldState) {\n\t\t\treturn (aliveNeighbours === 2 || aliveNeighbours === 3) ? 1 : 0;\n\t\t} else {\n\t\t\treturn aliveNeighbours === 3 ? 1 : 0;\n\t\t}\n\t}\n\n\tgenerateNewRandomState(rowCount: number = this.state.size.h, columnCount: number = this.state.size.w ): GridObject {\n\t\tlet newState: GridObject = [];\n\t\tfor (let rowIndex = 0; rowIndex < rowCount; rowIndex ++) {\n\t\t\tnewState[rowIndex] = [];\n\t\t\tfor (let columnIndex = 0; columnIndex < columnCount; columnIndex ++) {\n\t\t\t\tnewState[rowIndex].push( Math.random() > 0.7 ? 1 : 0 );\n\t\t\t}\n\t\t}\n\t\treturn newState;\n\t}\n\n\tgenerateEmptyState(rowCount: number = this.state.size.h, columnCount: number = this.state.size.w ): GridObject {\n\t\tlet newState: GridObject = [];\n\t\tfor (let rowIndex = 0; rowIndex < rowCount; rowIndex ++) {\n\t\t\tnewState[rowIndex] = [];\n\t\t\tfor (let columnIndex = 0; columnIndex < columnCount; columnIndex ++) {\n\t\t\t\tnewState[rowIndex].push( 0 );\n\t\t\t}\n\t\t}\n\t\treturn newState;\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"h-full pt-20 bg-darkgreen\">\n\t\t\t\t<div className=\"h-full p-2\">\n\t\t\t\t\t<div id=\"GridWrapper\" className={\"h-full flex justify-center content-center\"}>\n\t\t\t\t\t\t<GridLayout gridState={this.state.gridState} cellSize={this.state.cellSize} size={this.state.size} loadingAnimation={this.state.loadingIn}/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t};\n}\n\nexport default Grid;","import React, {createRef} from 'react';\nimport NavBar from \"./NavBar\";\nimport Grid from \"./Grid\";\nimport {ControlEvent} from \"./model/controlEvent\";\n\ninterface ComponentsProps { }\ninterface ComponentsState { }\n\nclass App extends React.Component<ComponentsProps, ComponentsState> {\n    private gridRef = createRef<Grid>();\n\n    constructor(props: ComponentsProps) {\n        super(props);\n\n        this.state = { }\n    }\n\n    messageToGrid(event: ControlEvent) {\n        if (this.gridRef.current) this.gridRef.current.handleControlEvent(event);\n    }\n\n    render () {\n        return (\n            <div className=\"App\">\n              <NavBar actionCallBack={this.messageToGrid.bind(this)} />\n              <Grid ref={this.gridRef} />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}