{"version":3,"sources":["NavBar.tsx","Cell.tsx","GridLayout.tsx","utils.ts","Grid.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","props","state","controlEvent","this","shouldBeDisabled","actionCallBack","gridControlState","condition","classes","buttonClassname","className","id","onClick","handleClick","bind","classesIf","React","Component","Cell","animationRunning","e","buttons","status","setState","onMouseDown","onHoverOrHover","onMouseOver","onAnimationStart","setAnimationStatus","onAnimationEnd","alive","style","transition","GridLayout","validateProps","gridState","length","size","h","console","error","w","grid","i","row","j","oldValue","oldRange","newRange","cellStyle","animation","delay","min","max","push","key","margin","handleCellClick","padding","width","cellSize","height","onDragStart","event","preventDefault","createGrid","Grid","play","edit","generateEmptyState","undefined","wrapperElement","document","getElementById","Math","floor","clientHeight","clientWidth","adjustGridToNewSize","newHeight","newWidth","oldHeight","oldWidth","rowIndex","truncateOrFillWith","generateEmptyColumn","newLength","oldLength","parent","fillElement","splice","updateGridSize","window","addEventListener","callback","handleNextState","generateNewRandomState","calculateNextGrid","setTimeout","rowCount","columnCount","newGridState","columnIndex","aliveNeighbours","countAliveNeighbours","oldCellState","newCellState","calculateCellState","cellIndex","count","gridRowIndexOffset","gridColumnIndexOffset","indexInGridBounds","oldState","newState","random","columnSize","emptyColumn","column","toggleCellStateAt","clonedGrid","App","gridRef","createRef","current","handleControlEvent","messageToGrid","ref","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d6cb664.chunk.js","sourcesContent":["import React from \"react\";\nimport {ControlEvent} from \"./model/controlEvent\";\nimport {State} from \"./model/state\";\n\ninterface ComponentsProps { gridControlState: State, actionCallBack: (event: ControlEvent) => void }\ninterface ComponentsState { }\n\nclass NavBar extends React.Component<ComponentsProps, ComponentsState> {\n\tconstructor(props: ComponentsProps) {\n\t\tsuper(props);\n\n\t\tthis.state = { }\n\t}\n\n\thandleClick(controlEvent: ControlEvent) {\n\t\tif (!this.shouldBeDisabled(controlEvent)) this.props.actionCallBack(controlEvent);\n\t}\n\n\tshouldBeDisabled(controlEvent: ControlEvent): boolean {\n\t\tif (this.props.gridControlState === \"PLAY\") {\n\t\t\treturn controlEvent !== \"PAUSE\";\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tclassesIf(condition: boolean, classes: string) {\n\t\treturn condition ? classes : \"\";\n\t}\n\n\trender () {\n\t\tconst buttonClassname = \"h-full mx-1 px-1 bg-transparent text-white font-bold border border-transparent rounded appearance-none focus:outline-none \";\n\t\treturn (\n\t\t\t<div className=\"w-full h-12 flex-shrink-0 px-6 flex flex-wrap items-center justify-between bg-black\">\n\t\t\t\t<div>\n\t\t\t\t\t<span className=\"text-white font-extrabold text-3xl\">Game of Life</span>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"controls\" className=\"h-full my-auto py-1 text-xl\">\n\t\t\t\t\t{ this.props.gridControlState === \"PLAY\" ? (\n\t\t\t\t\t\t<button className={buttonClassname} onClick={this.handleClick.bind(this,\"PAUSE\")}>Pause</button>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<button className={buttonClassname} onClick={this.handleClick.bind(this,\"PLAY\")}>Play</button>\n\t\t\t\t\t) }\n\t\t\t\t\t<button className={buttonClassname + \" active:underline\" + this.classesIf(this.shouldBeDisabled(\"RAND\"), \" opacity-50 cursor-not-allowed\")} onClick={this.handleClick.bind(this,\"RAND\")}>Randomize</button>\n\t\t\t\t\t<button className={buttonClassname + \" active:underline\" + this.classesIf(this.props.gridControlState === \"EDIT\", \" underline\") + this.classesIf(this.shouldBeDisabled(\"EDIT\"), \" opacity-50 cursor-not-allowed\")} onClick={this.handleClick.bind(this,\"EDIT\")}>Edit</button>\n\t\t\t\t\t<button className={buttonClassname + \" active:underline\" + this.classesIf(this.shouldBeDisabled(\"CLEAR\"), \" opacity-50 cursor-not-allowed\")} onClick={this.handleClick.bind(this,\"CLEAR\")}>Clear</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default NavBar;\n","import React, {CSSProperties} from 'react';\n\ninterface ComponentsProps { alive: 0 | 1, className?: string, style?: CSSProperties, onClick: (e: React.SyntheticEvent) => void}\ninterface ComponentsState { animationRunning: boolean }\n\nclass Cell extends React.Component<ComponentsProps, ComponentsState> {\n\tconstructor(props: ComponentsProps) {\n\t\tsuper(props);\n\n\t\tthis.state = { animationRunning: false }\n\t}\n\n\tonHoverOrHover(e: React.MouseEvent) {\n\t\tif (!this.state.animationRunning && e.buttons === 1) this.props.onClick(e);\n\t}\n\n\tsetAnimationStatus(status: boolean) {\n\t\tthis.setState({animationRunning: status});\n\t}\n\n\trender () {\n\t\tconst internalStyles: CSSProperties = {transition: \"background-color 0.1s\"};\n\t\treturn (\n\t\t\t<div\n\t\t\t\tonMouseDown={this.onHoverOrHover.bind(this)}\n\t\t\t\tonMouseOver={this.onHoverOrHover.bind(this)}\n\t\t\t\tonAnimationStart={this.setAnimationStatus.bind(this, true)}\n\t\t\t\tonAnimationEnd={this.setAnimationStatus.bind(this, false)}\n\t\t\t\tclassName={(this.props.alive ? \"bg-grey\" : \"bg-green\" ) + \" cell flex-1 inline-block rounded \" + this.props.className}\n\t\t\t\tstyle={{...internalStyles, ...this.props.style}}/>\n\t\t);\n\t}\n}\n\nexport default Cell;\n","import React, {CSSProperties, DragEvent} from 'react';\nimport Cell from \"./Cell\";\nimport Grid from \"./model/grid\";\nimport remap from \"./utils\";\n\ninterface ComponentsProps { gridState: Grid, cellSize: number, size: { h: number, w: number }, animation?: \"loadingIn\" | \"poppingIn\", handleCellClick: (e:React.SyntheticEvent, row: number, column: number) => void }\ninterface ComponentsState { }\n\nexport default class GridLayout extends React.Component<ComponentsProps, ComponentsState> {\n\tconstructor(props: ComponentsProps) {\n\t\tsuper(props);\n\n\t\tthis.validateProps(props);\n\n\t\tthis.state = { };\n\t}\n\n\tvalidateProps(props: ComponentsProps) {\n\t\tif (props.gridState.length !== props.size.h) console.error(\"Invalid Props: The GridState Row Count doesn't match with the size.h \");\n\t\tif (props.gridState[0].length !== props.size.w) console.error(\"Invalid Props: The GridState Column Count doesn't match with the size.w \");\n\t}\n\n\tcreateGrid() {\n\t\tlet grid = [];\n\n\t\tfor (let i = 0; i < this.props.size.h; i++) {\n\t\t\tlet row = [];\n\t\t\tfor (let j = 0; j < this.props.size.w; j++) {\n\t\t\t\tlet cellStyle: CSSProperties = {};\n\t\t\t\tif (this.props.animation) {\n\t\t\t\t\tif (this.props.animation === \"loadingIn\") {\n\t\t\t\t\t\tconst delay = remap(i+j, {min: 0, max: this.props.size.h+this.props.size.w}, {min: 0, max: 2});\n\t\t\t\t\t\tcellStyle.transition = \"background-color 1s ease \" + delay + \"s\"\n\t\t\t\t\t} else if (this.props.animation === \"poppingIn\" && this.props.gridState[i][j]) {\n\t\t\t\t\t\tcellStyle.animation = \"popout 0.5s ease\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trow.push(\n\t\t\t\t\t<Cell key={i-j}\n\t\t\t\t\t      alive={this.props.gridState[i][j]}\n\t\t\t\t\t      style={{margin: \"0 3px\", ...cellStyle}}\n\t\t\t\t\t      onClick={(e:React.SyntheticEvent) => {this.props.handleCellClick(e,i,j)}}/>\n\t\t\t\t)\n\t\t\t}\n\t\t\tgrid.push(<div key={i} className=\"row flex flex-1\" style={{padding: \"3px 0\"}}>{row}</div>)\n\t\t}\n\t\treturn grid\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div\n\t\t\t\tclassName={\"flex flex-col\"}\n\t\t\t\tstyle={{ width: this.props.size.w * this.props.cellSize, height: this.props.size.h * this.props.cellSize }}\n\t\t\t\tonDragStart={(event: DragEvent<HTMLElement>) => {event.preventDefault()}} >\n\t\t\t\t{this.createGrid()}\n\t\t\t</div>\n\t\t)\n\t}\n}","export default function remap(oldValue: number, oldRange:{min: number, max: number}, newRange:{min: number, max: number}) {\n\treturn (((oldValue - oldRange.min) * (newRange.max - newRange.min)) / (oldRange.max - oldRange.min)) + newRange.min;\n}","import React from \"react\";\nimport GridLayout from \"./GridLayout\";\nimport {ControlEvent} from \"./model/controlEvent\";\nimport GridObject from \"./model/grid\";\nimport Alive from \"./model/alive\";\n\ninterface ComponentsProps {  }\ninterface ComponentsState { play: boolean, edit: boolean, cellSize: number, size: { h: number, w: number }, gridState: GridObject, animation: \"loadingIn\" | \"poppingIn\" | undefined }\n\nclass Grid extends React.Component<ComponentsProps, ComponentsState> {\n\tconstructor(props: ComponentsProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tplay: false,\n\t\t\tedit: false,\n\t\t\tcellSize: 20,\n\t\t\tsize: { h: 30, w: 60 },\n\t\t\tgridState: this.generateEmptyState(30,60),\n\t\t\tanimation: undefined\n\t\t}\n\t}\n\n\tupdateGridSize() {\n\t\tconst wrapperElement = document.getElementById(\"GridWrapper\");\n\t\tif (wrapperElement) {\n\t\t\tconst h =  Math.floor(wrapperElement.clientHeight / this.state.cellSize);\n\t\t\tconst w = Math.floor(wrapperElement.clientWidth / this.state.cellSize);\n\n\t\t\tthis.setState({\n\t\t\t\tsize: {h, w},\n\t\t\t\tgridState: this.adjustGridToNewSize(this.state.gridState, h, w)\n\t\t\t});\n\t\t}\n\t}\n\n\tadjustGridToNewSize(grid: GridObject, newHeight: number, newWidth: number): GridObject {\n\t\tconst oldHeight = grid.length, oldWidth = grid[0].length;\n\n\t\tfor (let rowIndex = 0; rowIndex < oldHeight; rowIndex ++) {\n\t\t\tgrid[rowIndex] = this.truncateOrFillWith(newWidth, oldWidth, grid[rowIndex], 0);\n\t\t}\n\n\t\tgrid = this.truncateOrFillWith(newHeight, oldHeight, grid ,this.generateEmptyColumn(newWidth));\n\n\t\treturn grid;\n\t}\n\n\ttruncateOrFillWith<T>(newLength: number, oldLength: number, parent: T[], fillElement: T): T[] {\n\t\tif (newLength < oldLength) {\n\t\t\tparent = parent.splice(0, newLength);\n\t\t} else {\n\t\t\tfor (let i = oldLength; i < newLength; i++) {\n\t\t\t\tparent.push(fillElement)\n\t\t\t}\n\t\t}\n\t\treturn parent\n\t}\n\n\tcomponentDidMount(): void {\n\t\tthis.updateGridSize();\n\n\t\twindow.addEventListener(\"resize\", this.updateGridSize.bind(this));\n\t}\n\n\thandleControlEvent(event: ControlEvent, callback: (state: ControlEvent) => void) {\n\t\tswitch (event) {\n\t\t\tcase \"PLAY\":\n\t\t\t\tif (!this.state.play) {\n\t\t\t\t\tthis.setState({play: true, animation: undefined, edit: false}, () => {this.handleNextState()});\n\t\t\t\t\tcallback(\"PLAY\");\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase \"PAUSE\":\n\t\t\t\tthis.setState({play: false});\n\t\t\t\tcallback(\"PAUSE\");\n\t\t\t\treturn;\n\t\t\tcase \"RAND\":\n\t\t\t\tthis.setState({gridState: this.generateNewRandomState(), animation: \"loadingIn\"});\n\t\t\t\treturn;\n\t\t\tcase \"EDIT\":\n\t\t\t\tif (this.state.edit) {\n\t\t\t\t\tthis.setState({edit: false, animation: undefined});\n\t\t\t\t\tcallback(\"PAUSE\");\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({edit: true, animation: \"poppingIn\"});\n\t\t\t\t\tcallback(\"EDIT\");\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase \"CLEAR\":\n\t\t\t\tthis.setState({gridState: this.generateEmptyState(), animation: undefined});\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\thandleNextState() {\n\t\tif (!this.state.play) return;\n\n\t\tthis.setState({gridState: this.calculateNextGrid( this.state.gridState )});\n\n\t\tsetTimeout(() => {this.handleNextState()}, 150)\n\t}\n\n\tcalculateNextGrid(grid: GridObject, rowCount: number = this.state.size.h, columnCount: number = this.state.size.w): GridObject {\n\t\tlet newGridState: GridObject = [];\n\t\tfor (let rowIndex = 0; rowIndex < rowCount; rowIndex ++) {\n\t\t\tnewGridState[rowIndex] = [];\n\t\t\tfor (let columnIndex = 0; columnIndex < columnCount; columnIndex ++) {\n\t\t\t\tconst aliveNeighbours = this.countAliveNeighbours(grid, {rowIndex, columnIndex});\n\t\t\t\tconst oldCellState = grid[rowIndex][columnIndex];\n\t\t\t\tconst newCellState = this.calculateCellState(aliveNeighbours, oldCellState);\n\t\t\t\tnewGridState[rowIndex].push( newCellState );\n\t\t\t}\n\t\t}\n\t\treturn newGridState\n\t}\n\n\tcountAliveNeighbours(grid: GridObject, cellIndex: { rowIndex: number, columnIndex: number }): number {\n\t\tlet count = 0;\n\t\tfor (let gridRowIndexOffset = -1; gridRowIndexOffset <= 1; gridRowIndexOffset++ ) {\n\t\t\tfor (let gridColumnIndexOffset = -1; gridColumnIndexOffset <= 1; gridColumnIndexOffset++ ) {\n\t\t\t\tconst rowIndex = cellIndex.rowIndex + gridRowIndexOffset;\n\t\t\t\tconst columnIndex = cellIndex.columnIndex + gridColumnIndexOffset;\n\t\t\t\tif (this.indexInGridBounds(grid, {rowIndex, columnIndex})\n\t\t\t\t&& !(gridColumnIndexOffset === 0 && gridRowIndexOffset === 0)) {\n\t\t\t\t\tcount += grid[rowIndex][columnIndex] ? 1 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count\n\t}\n\n\tindexInGridBounds(grid: GridObject, cellIndex: { rowIndex: number, columnIndex: number }) {\n\t\treturn cellIndex.rowIndex >= 0 && cellIndex.rowIndex < grid.length && cellIndex.columnIndex >= 0 && cellIndex.columnIndex < grid[0].length;\n\t}\n\n\tcalculateCellState(aliveNeighbours: number, oldState: Alive): Alive {\n\t\tif (oldState) {\n\t\t\treturn (aliveNeighbours === 2 || aliveNeighbours === 3) ? 1 : 0;\n\t\t} else {\n\t\t\treturn aliveNeighbours === 3 ? 1 : 0;\n\t\t}\n\t}\n\n\tgenerateNewRandomState(rowCount: number = this.state.size.h, columnCount: number = this.state.size.w ): GridObject {\n\t\tlet newState: GridObject = [];\n\t\tfor (let rowIndex = 0; rowIndex < rowCount; rowIndex ++) {\n\t\t\tnewState[rowIndex] = [];\n\t\t\tfor (let columnIndex = 0; columnIndex < columnCount; columnIndex ++) {\n\t\t\t\tnewState[rowIndex].push( Math.random() > 0.7 ? 1 : 0 );\n\t\t\t}\n\t\t}\n\t\treturn newState;\n\t}\n\n\tgenerateEmptyState(rowCount: number = this.state.size.h, columnCount: number = this.state.size.w ): GridObject {\n\t\tlet newState: GridObject = [];\n\t\tfor (let rowIndex = 0; rowIndex < rowCount; rowIndex ++) {\n\t\t\tnewState[rowIndex] = this.generateEmptyColumn(columnCount);\n\t\t}\n\t\treturn newState;\n\t}\n\n\tgenerateEmptyColumn(columnSize: number): Alive[] {\n\t\tlet emptyColumn: Alive[] = [];\n\t\tfor (let columnIndex = 0; columnIndex < columnSize; columnIndex ++) {\n\t\t\temptyColumn.push( 0 );\n\t\t}\n\t\treturn emptyColumn;\n\t}\n\n\thandleCellClick(e: React.SyntheticEvent, row: number, column: number) {\n\t\tif (!this.state.edit) return;\n\t\tthis.toggleCellStateAt(row, column)\n\t}\n\n\ttoggleCellStateAt(row: number, column: number) {\n\t\tlet clonedGrid = [ ...this.state.gridState ];\n\t\tclonedGrid[row][column] = clonedGrid[row][column] === 1 ? 0 : 1;\n\t\tthis.setState({ gridState: clonedGrid })\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"bg-darkgreen flex-grow flex-shrink overflow-hidden\">\n\t\t\t\t<div className=\"h-full p-2\">\n\t\t\t\t\t<div id=\"GridWrapper\" className={\"h-full flex justify-center content-center\"}>\n\t\t\t\t\t\t<GridLayout\n\t\t\t\t\t\t\tgridState={this.state.gridState}\n\t\t\t\t\t\t\tcellSize={this.state.cellSize}\n\t\t\t\t\t\t\tsize={this.state.size}\n\t\t\t\t\t\t\tanimation={this.state.animation}\n\t\t\t\t\t\t\thandleCellClick={this.handleCellClick.bind(this)}/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t};\n}\n\nexport default Grid;","import React, {createRef} from 'react';\nimport NavBar from \"./NavBar\";\nimport Grid from \"./Grid\";\nimport {ControlEvent} from \"./model/controlEvent\";\nimport {State} from \"./model/state\";\n\ninterface ComponentsProps { }\ninterface ComponentsState { gridControlState: State }\n\nclass App extends React.Component<ComponentsProps, ComponentsState> {\n    private gridRef = createRef<Grid>();\n\n    constructor(props: ComponentsProps) {\n        super(props);\n\n        this.state = { gridControlState: \"PAUSE\" }\n    }\n\n    messageToGrid(event: ControlEvent) {\n        if (this.gridRef.current) {\n            this.gridRef.current.handleControlEvent(event, (state: ControlEvent) => {\n                if (state === \"PLAY\" || state === \"PAUSE\" || state === \"EDIT\") this.setState({ gridControlState: state });\n            })\n        }\n    }\n\n    render () {\n        return (\n            <div className=\"App flex flex-col\">\n              <NavBar gridControlState={this.state.gridControlState} actionCallBack={this.messageToGrid.bind(this)} />\n              <Grid ref={this.gridRef} />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}